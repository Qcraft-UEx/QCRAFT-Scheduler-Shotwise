from qiskit import QuantumRegister, ClassicalRegister, QuantumCircuit
import numpy as np

qreg_q = QuantumRegister(6, 'q')
creg_c = ClassicalRegister(6, 'c')
circuit = QuantumCircuit(qreg_q, creg_c)

# Qubits: [q(0, 0), q(0, 1), q(0, 2), q(1, 0), q(1, 1), q(1, 2)]
circuit.h(qreg_q[0])
circuit.h(qreg_q[1])
circuit.h(qreg_q[2])
circuit.h(qreg_q[3])
circuit.h(qreg_q[4])
circuit.h(qreg_q[5])
# Gate: ZZ
circuit.z(qreg_q[0])
circuit.z(qreg_q[1])
circuit.u(0, 0, 0, qreg_q[0])
circuit.u(0, 0, 0, qreg_q[1])
circuit.sx(qreg_q[0])
circuit.cx(qreg_q[0], qreg_q[1])
circuit.sx(qreg_q[0])
circuit.ry(np.pi * 0.5, qreg_q[1])
circuit.cx(qreg_q[1], qreg_q[0])
circuit.sxdg(qreg_q[1])
circuit.s(qreg_q[1])
circuit.cx(qreg_q[0], qreg_q[1])
circuit.u(0, 0, 0, qreg_q[0])
circuit.u(0, 0, 0, qreg_q[1])
# Gate: ZZ
circuit.z(qreg_q[3])
circuit.z(qreg_q[4])
circuit.u(0, 0, 0, qreg_q[3])
circuit.u(0, 0, 0, qreg_q[4])
circuit.sx(qreg_q[3])
circuit.cx(qreg_q[3], qreg_q[4])
circuit.sx(qreg_q[3])
circuit.ry(np.pi * 0.5, qreg_q[4])
circuit.cx(qreg_q[4], qreg_q[3])
circuit.sxdg(qreg_q[4])
circuit.s(qreg_q[4])
circuit.cx(qreg_q[3], qreg_q[4])
circuit.u(0, 0, 0, qreg_q[3])
circuit.u(0, 0, 0, qreg_q[4])
# Gate: ZZ**-1.0
circuit.rz(np.pi * -1.0, qreg_q[1])
circuit.rz(np.pi * -1.0, qreg_q[2])
circuit.u(0, 0, 0, qreg_q[1])
circuit.u(0, 0, 0, qreg_q[2])
circuit.sx(qreg_q[1])
circuit.z(qreg_q[4])
circuit.z(qreg_q[5])
circuit.u(0, 0, 0, qreg_q[4])
circuit.u(0, 0, 0, qreg_q[5])
circuit.sx(qreg_q[4])
circuit.cx(qreg_q[4], qreg_q[5])
circuit.rz(np.pi * -1.0, qreg_q[0])
circuit.rz(np.pi * -1.0, qreg_q[3])
circuit.u(0, 0, 0, qreg_q[0])
circuit.u(0, 0, 0, qreg_q[3])
circuit.sx(qreg_q[0])
circuit.cx(qreg_q[0], qreg_q[3])
circuit.cx(qreg_q[1], qreg_q[2])
circuit.sx(qreg_q[4])
circuit.ry(np.pi * 0.5, qreg_q[5])
# Gate: ZZ
# Gate: ZZ**-1.0
circuit.sx(qreg_q[0])
circuit.ry(np.pi * 0.5, qreg_q[3])
circuit.sx(qreg_q[1])
circuit.ry(np.pi * 0.5, qreg_q[2])
circuit.cx(qreg_q[5], qreg_q[4])
circuit.cx(qreg_q[2], qreg_q[1])
circuit.sxdg(qreg_q[5])
circuit.cx(qreg_q[3], qreg_q[0])
circuit.s(qreg_q[5])
circuit.sxdg(qreg_q[3])
circuit.sxdg(qreg_q[2])
circuit.cx(qreg_q[4], qreg_q[5])
circuit.s(qreg_q[3])
circuit.s(qreg_q[2])
circuit.u(0, 0, 0, qreg_q[4])
circuit.u(0, 0, 0, qreg_q[5])
circuit.cx(qreg_q[0], qreg_q[3])
circuit.z(qreg_q[4])
circuit.z(qreg_q[5])
circuit.cx(qreg_q[1], qreg_q[2])
circuit.u(0, 0, 0, qreg_q[0])
circuit.u(0, 0, 0, qreg_q[3])
# Gate: ZZ
circuit.u(0, 0, 0, qreg_q[4])
circuit.u(0, 0, 0, qreg_q[5])
circuit.u(0, 0, 0, qreg_q[1])
circuit.u(0, 0, 0, qreg_q[2])
circuit.rx(np.pi * 1.0, qreg_q[0])
circuit.rx(np.pi * 1.0, qreg_q[3])
circuit.z(qreg_q[1])
circuit.z(qreg_q[2])
# Gate: ZZ
circuit.measure(qreg_q[3], creg_c[3])
circuit.u(0, 0, 0, qreg_q[1])
circuit.u(0, 0, 0, qreg_q[2])
circuit.sx(qreg_q[1])
circuit.sx(qreg_q[2])
circuit.cx(qreg_q[1], qreg_q[4])
circuit.sx(qreg_q[1])
circuit.cx(qreg_q[2], qreg_q[5])
circuit.ry(np.pi * 0.5, qreg_q[4])
circuit.cx(qreg_q[4], qreg_q[1])
circuit.sx(qreg_q[2])
circuit.ry(np.pi * 0.5, qreg_q[5])
circuit.cx(qreg_q[5], qreg_q[2])
circuit.sxdg(qreg_q[4])
circuit.sxdg(qreg_q[5])
circuit.s(qreg_q[4])
circuit.s(qreg_q[5])
circuit.cx(qreg_q[1], qreg_q[4])
circuit.u(0, 0, 0, qreg_q[1])
circuit.cx(qreg_q[2], qreg_q[5])
circuit.u(0, 0, 0, qreg_q[4])
circuit.u(0, 0, 0, qreg_q[2])
circuit.u(0, 0, 0, qreg_q[5])
circuit.rx(np.pi * 1.0, qreg_q[1])
circuit.rx(np.pi * 1.0, qreg_q[2])
circuit.rx(np.pi * 1.0, qreg_q[4])
circuit.rx(np.pi * 1.0, qreg_q[5])
circuit.measure(qreg_q[0], creg_c[0])
circuit.measure(qreg_q[1], creg_c[1])
circuit.measure(qreg_q[4], creg_c[4])
circuit.measure(qreg_q[2], creg_c[2])
circuit.measure(qreg_q[5], creg_c[5])