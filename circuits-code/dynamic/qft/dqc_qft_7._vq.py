from qiskit import QuantumRegister, ClassicalRegister, QuantumCircuit
import numpy as np

qreg_q = QuantumRegister(7, 'q')
creg_c = ClassicalRegister(7, 'c')  # Single classical register
circuit = QuantumCircuit(qreg_q, creg_c)

circuit.h(qreg_q[0])
circuit.measure(qreg_q[0], creg_c[0])
circuit.p(np.pi / 2, qreg_q[1]).c_if(creg_c[0], 1)
circuit.p(np.pi / 4, qreg_q[2]).c_if(creg_c[0], 1)
circuit.p(np.pi / 8, qreg_q[3]).c_if(creg_c[0], 1)
circuit.p(np.pi / 16, qreg_q[4]).c_if(creg_c[0], 1)
circuit.p(np.pi / 32, qreg_q[5]).c_if(creg_c[0], 1)
circuit.p(np.pi / 64, qreg_q[6]).c_if(creg_c[0], 1)
circuit.h(qreg_q[1])
circuit.measure(qreg_q[1], creg_c[1])
circuit.p(np.pi / 2, qreg_q[2]).c_if(creg_c[1], 1)
circuit.p(np.pi / 4, qreg_q[3]).c_if(creg_c[1], 1)
circuit.p(np.pi / 8, qreg_q[4]).c_if(creg_c[1], 1)
circuit.p(np.pi / 16, qreg_q[5]).c_if(creg_c[1], 1)
circuit.p(np.pi / 32, qreg_q[6]).c_if(creg_c[1], 1)
circuit.h(qreg_q[2])
circuit.measure(qreg_q[2], creg_c[2])
circuit.p(np.pi / 2, qreg_q[3]).c_if(creg_c[2], 1)
circuit.p(np.pi / 4, qreg_q[4]).c_if(creg_c[2], 1)
circuit.p(np.pi / 8, qreg_q[5]).c_if(creg_c[2], 1)
circuit.p(np.pi / 16, qreg_q[6]).c_if(creg_c[2], 1)
circuit.h(qreg_q[3])
circuit.measure(qreg_q[3], creg_c[3])
circuit.p(np.pi / 2, qreg_q[4]).c_if(creg_c[3], 1)
circuit.p(np.pi / 4, qreg_q[5]).c_if(creg_c[3], 1)
circuit.p(np.pi / 8, qreg_q[6]).c_if(creg_c[3], 1)
circuit.h(qreg_q[4])
circuit.measure(qreg_q[4], creg_c[4])
circuit.p(np.pi / 2, qreg_q[5]).c_if(creg_c[4], 1)
circuit.p(np.pi / 4, qreg_q[6]).c_if(creg_c[4], 1)
circuit.h(qreg_q[5])
circuit.measure(qreg_q[5], creg_c[5])
circuit.p(np.pi / 2, qreg_q[6]).c_if(creg_c[5], 1)
circuit.h(qreg_q[6])
circuit.measure(qreg_q[6], creg_c[6])